// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract.go

// Package mock_cron is a generated GoMock package.
package mock_cron

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCronContract is a mock of CronContract interface
type MockCronContract struct {
	ctrl     *gomock.Controller
	recorder *MockCronContractMockRecorder
}

// MockCronContractMockRecorder is the mock recorder for MockCronContract
type MockCronContractMockRecorder struct {
	mock *MockCronContract
}

// NewMockCronContract creates a new mock instance
func NewMockCronContract(ctrl *gomock.Controller) *MockCronContract {
	mock := &MockCronContract{ctrl: ctrl}
	mock.recorder = &MockCronContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCronContract) EXPECT() *MockCronContractMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockCronContract) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCronContractMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronContract)(nil).Start))
}

// Stop mocks base method
func (m *MockCronContract) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockCronContractMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronContract)(nil).Stop))
}
